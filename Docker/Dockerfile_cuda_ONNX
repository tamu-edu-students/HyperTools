FROM nvidia/cuda:12.2.0-devel-ubuntu20.04


ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update
RUN apt-get upgrade -y

RUN apt-get install -y \ 
    cmake \
    build-essential   \
    g++  \
    wget \
    unzip \
    libgtk2.0-dev \
    pkg-config  \
    libjsoncpp-dev \
    libcanberra-gtk-module \
    libgtk-3-dev \
    libboost-all-dev \
    glade  \
    git  


RUN mkdir -p opencv_build &&\
    cd opencv_build && \
    wget -O opencv.zip https://github.com/opencv/opencv/archive/4.2.0.zip && \
    wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.2.0.zip && \
    unzip opencv.zip &&\
    rm opencv.zip && \
    unzip opencv_contrib.zip &&\
    rm opencv_contrib.zip && \
    mkdir -p build && \ 
    cd build &&\
    cmake \
    -DOPENCV_ENABLE_NONFREE:BOOL=ON  \
    -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.2.0/modules  ../opencv-4.2.0/     \
    -D OPENCV_GENERATE_PKGCONFIG=ON &&\
    make -j$(nproc) &&\
    make install && \
    ldconfig
 
RUN apt-get install -y \
    language-pack-en-base \
    libgdal-dev \
    python3-pip \
    python3-tk \
    libhdf5-dev \
    libtool \
    m4 \
    automake

RUN pip3 install \
    matplotlib 

RUN cd / &&\
    git clone git://git.code.sf.net/p/matio/matio &&\
    cd matio &&\
    mkdir build &&\
    cd build &&\
    cmake .. &&\
    cmake --build . &&\
    cmake --install .

RUN apt remove --purge --auto-remove cmake -y && \
    apt update && \
    apt install -y software-properties-common lsb-release && \
    apt clean all 

    
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - |  tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null  && \
    apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"  && \
    apt update && \
    apt install kitware-archive-keyring -y && \
    rm /etc/apt/trusted.gpg.d/kitware.gpg && \
    apt-get update && \
    apt-get install -y \
    cmake \
    build-essential 


RUN cd / &&\
    git clone https://github.com/cubert-hyperspectral/cuvis.sdk.git &&\
    cd cuvis.sdk &&\
    git submodule update --init --recursive

RUN wget https://cloud.cubert-gmbh.de/index.php/s/m1WfR66TjcGl96z/download && \
    unzip download && \
	cd latest_release && \
    cd Ubuntu\ 20.04/  && \
	apt install ./cuviscommon_3.2.1-1.deb -y && \
	dpkg -i --force-overwrite ./libcuvis_3.2.1-1.deb

RUN add-apt-repository ppa:deadsnakes/ppa

RUN apt-get update

RUN apt install -y \
	software-properties-common \
	python3.9 \
	python3-pip \
	doxygen \
	graphviz \
	swig \
	python3.9-dev 
	
RUN pip install \
	numpy 


RUN apt update -y

RUN apt upgrade -y

RUN cd /cuvis.sdk &&\
	git clone https://github.com/cubert-hyperspectral/cuvis.pyil.git &&\
    cd cuvis.pyil &&\
    git submodule update --init --recursive &&\
    python3.9 -m pip install . &&\
    mkdir build &&\
    cd build &&\
    cmake  -DCMAKE_BUILD_TYPE=Release -DDOXYGEN_BUILD_DOCUMENTATION=OFF -DPython_ROOT_DIR=/usr/bin/python3.9  .. &&\
    cmake --build . --target cuvis_pyil --config Release &&\
	cp ./_cuvis_pyil.so ../cuvis_il && \
	cp ./cuvis_il.py ../cuvis_il && \
    cd .. &&\
    python3.9 -m pip install . 

# below is a temp fix for the cuvis.python repo
RUN cd /cuvis.sdk/cuvis.python &&\
    git checkout main &&\
    python3.9 -m pip install  .

# this is how to pip install for python3.9 instead of the standard python environment
RUN python3.9 -m pip install matplotlib


# below is a temp fix until the cuvis.cpp repo is updated
RUN cd /cuvis.sdk/ &&\
    rm -r cuvis.cpp &&\
    git clone https://github.com/antmedellin/cuvis.cpp.git &&\
    cd cuvis.cpp &&\
    git fetch &&\
    git checkout patch-1
    
    
RUN echo 'alias python="/usr/bin/python3.9"' >> ~/.bashrc 
RUN echo 'alias python3="/usr/bin/python3.9"' >> ~/.bashrc 
RUN echo 'export CUVIS="/lib/cuvis"' >> ~/.bashrc 
RUN echo 'export CUVIS_DATA="/opt/cuvis"' >> ~/.bashrc 

RUN apt-get update &&\
    apt-get install -y python3-pip \
    python3-tk \
    pocl-opencl-icd

RUN pip install \
    pycocotools \
    onnx \
    onnxruntime \
    tqdm \
    pandas \
    scikit-learn \
    pyopencl \
    scipy \
    opencv-python \
    numpy \
    matplotlib \
    torch \
    torchvision \
    kornia

RUN python3.9 -m pip install \
    pycocotools \
    onnx \
    onnxruntime \
    tqdm \
    pandas \
    scikit-learn \
    pyopencl \
    scipy \
    opencv-python \
    numpy \
    matplotlib \
    torch \
    torchvision \
    kornia

RUN git clone --recursive https://github.com/microsoft/onnxruntime 

RUN cd onnxruntime &&\
    ./build.sh --allow_running_as_root --skip_submodule_sync --config Release  --update --build_shared_lib --build  --cmake_extra_defines ONNXRUNTIME_VERSION=$(cat ./VERSION_NUMBER)

RUN apt-get update &&\
    apt-get install -y \
    libgflags-dev

WORKDIR /home

RUN cd /home &&\
    bash

